// <auto-generated />
using System;
using ApartmentManagement.Data.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApartmentManagement.Data.Migrations
{
    [DbContext(typeof(ApartmentManagementContext))]
    partial class ApartmentManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApartmentManagement.Entities.Concrete.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentNo")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Block")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Aparments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentNo = 1,
                            Block = "A",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2022, 4, 16, 4, 29, 1, 586, DateTimeKind.Local).AddTicks(6625),
                            Floor = "1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2022, 4, 16, 4, 29, 1, 586, DateTimeKind.Local).AddTicks(7165),
                            Status = "Dolu",
                            Type = "1+0"
                        },
                        new
                        {
                            Id = 2,
                            ApartmentNo = 2,
                            Block = "A",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2022, 4, 16, 4, 29, 1, 586, DateTimeKind.Local).AddTicks(7441),
                            Floor = "1",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2022, 4, 16, 4, 29, 1, 586, DateTimeKind.Local).AddTicks(7442),
                            Status = "Boş",
                            Type = "1+1"
                        },
                        new
                        {
                            Id = 3,
                            ApartmentNo = 3,
                            Block = "A",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2022, 4, 16, 4, 29, 1, 586, DateTimeKind.Local).AddTicks(7446),
                            Floor = "2",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2022, 4, 16, 4, 29, 1, 586, DateTimeKind.Local).AddTicks(7448),
                            Status = "Boş",
                            Type = "2+1"
                        },
                        new
                        {
                            Id = 4,
                            ApartmentNo = 4,
                            Block = "A",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2022, 4, 16, 4, 29, 1, 586, DateTimeKind.Local).AddTicks(7451),
                            Floor = "2",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2022, 4, 16, 4, 29, 1, 586, DateTimeKind.Local).AddTicks(7452),
                            Status = "Boş",
                            Type = "3+1"
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Entities.Concrete.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Manager");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2022, 4, 16, 4, 29, 1, 589, DateTimeKind.Local).AddTicks(5700),
                            Email = "ali@ali.com",
                            FirstName = "Alican",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Kesen",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2022, 4, 16, 4, 29, 1, 589, DateTimeKind.Local).AddTicks(5711),
                            PasswordHash = new byte[] { 102, 49, 98, 51, 99, 49, 98, 52, 99, 48, 51, 51, 53, 101, 54, 57, 48, 54, 101, 101, 48, 100, 99, 102, 57, 54, 100, 48, 98, 54, 49, 55 },
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2022, 4, 16, 4, 29, 1, 591, DateTimeKind.Local).AddTicks(3484),
                            Description = "Admin Tüm haklara sahiptir.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2022, 4, 16, 4, 29, 1, 591, DateTimeKind.Local).AddTicks(3494),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2022, 4, 16, 4, 29, 1, 591, DateTimeKind.Local).AddTicks(3502),
                            Description = "Kiracı",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2022, 4, 16, 4, 29, 1, 591, DateTimeKind.Local).AddTicks(3503),
                            Name = "Kiracı"
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarPlate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dues")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentityNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("InvoiceElectricity")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("InvoiceGas")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("InvoiceInternet")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("InvoiceWater")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("VARBINARY(500)");

                    b.Property<string>("Payment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarPlate = "34 LOGO 34",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2022, 4, 16, 4, 29, 1, 607, DateTimeKind.Local).AddTicks(319),
                            Dues = "100",
                            Email = "adsoyad@adsoyad.com",
                            FirstName = "Ad",
                            IdentityNo = "12345678901",
                            InvoiceElectricity = 200,
                            InvoiceGas = 300,
                            InvoiceInternet = 100,
                            InvoiceWater = 100,
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Soyad",
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2022, 4, 16, 4, 29, 1, 607, DateTimeKind.Local).AddTicks(331),
                            PasswordHash = new byte[] { 100, 50, 48, 53, 51, 97, 57, 97, 50, 55, 55, 51, 53, 55, 102, 97, 51, 48, 101, 99, 52, 48, 100, 101, 101, 101, 51, 98, 56, 101, 52, 100 },
                            PhoneNumber = "05551113322",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("ApartmentManagement.Entities.Concrete.Manager", b =>
                {
                    b.HasOne("ApartmentManagement.Entities.Concrete.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApartmentManagement.Entities.Concrete.User", b =>
                {
                    b.HasOne("ApartmentManagement.Entities.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ApartmentManagement.Entities.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
